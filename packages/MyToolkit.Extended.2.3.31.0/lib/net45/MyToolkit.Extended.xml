<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyToolkit.Extended</name>
    </assembly>
    <members>
        <member name="M:MyToolkit.Mvvm.ViewModelHelper.RegisterViewModel(MyToolkit.Mvvm.ViewModelBase,System.Windows.FrameworkElement)">
            <summary>Initializes the view model and registers events so that the OnLoaded and OnUnloaded methods are called. 
            This method must be called in the constructor after the <see cref="!:InitializeComponent"/> method call. </summary>
            <param name="viewModel">The view model. </param>
            <param name="view">The view. </param>
        </member>
        <member name="T:MyToolkit.Converters.DateTimeConverter">
            <summary>
            Converts a DateTime into its string representation. 
            </summary>
        </member>
        <member name="T:MyToolkit.Encryption.RijndaelEncryption">
            <summary>Provides methods to encrypt and decrypt data using the Rijndael encryption algorithm.</summary>
        </member>
        <member name="T:MyToolkit.Events.SingleEvent">
            <summary>Provides methods to register self-deregistering event callbacks. </summary>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForRoutedEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.WaitForEventAsync``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler})">
            <summary>Asynchronously wait for an occurrence of the given event. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``2(``0,System.Action{``0,System.EventHandler{``1}},System.Action{``0,System.EventHandler{``1}},System.Action{System.Object,``1})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <typeparam name="TEventArgs">The type of the event args. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterRoutedEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="M:MyToolkit.Events.SingleEvent.RegisterEvent``1(``0,System.Action{``0,System.Windows.RoutedEventHandler},System.Action{``0,System.Windows.RoutedEventHandler},System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>Registers an event callback which is called once and then automatically deregistered. </summary>
            <typeparam name="TEventSource">The type of the event source. </typeparam>
            <param name="source">The source object. </param>
            <param name="register">The event registration action. </param>
            <param name="deregister">The event deregistration action. </param>
            <param name="handler">The event handler. </param>
            <returns>The task. </returns>
        </member>
        <member name="T:MyToolkit.Messaging.DefaultActions">
            <summary>Provides default actions for some message lcasses to use with the <see cref="T:MyToolkit.Messaging.Messenger"/>. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTube">
            <summary>Provides methods to access YouTube streams and data. </summary>
        </member>
        <member name="F:MyToolkit.Multimedia.YouTube.DefaultMinQuality">
            <summary>Gets the default minimum quality. </summary>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,System.Threading.CancellationToken)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetVideoUriAsync(System.String,MyToolkit.Multimedia.YouTubeQuality,MyToolkit.Multimedia.YouTubeQuality)">
            <summary>Returns the best matching YouTube stream URI which has an audio and video channel and is not 3D. </summary>
            <returns>The best matching <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> of the video. </returns>
            <exception cref="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could not be found. </exception>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String)">
            <summary>Returns all available URIs (audio-only and video) for the given YouTube ID. </summary>
            <returns>The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/>s of the video. </returns>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetUrisAsync(System.String,System.Threading.CancellationToken)">
            <summary>Returns all available URIs (audio-only and video) for the given YouTube ID. </summary>
            <returns>The <see cref="T:MyToolkit.Multimedia.YouTubeUri"/>s of the video. </returns>
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.HttpGetAsync(System.String)">
            <exception cref="T:System.Net.WebException">An error occurred while downloading the resource. </exception>
        </member>
        <member name="M:MyToolkit.Multimedia.YouTube.GetThumbnailUri(System.String,MyToolkit.Multimedia.YouTubeThumbnailSize)">
            <summary>Returns a thumbnail for the given YouTube ID. </summary>
            <exception cref="T:System.ArgumentException">The value of 'size' is not defined. </exception>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeUriNotFoundException">
            <summary>Exception which occurs when no <see cref="T:MyToolkit.Multimedia.YouTubeUri"/> could be found. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeUri">
            <summary>An URI to a YouTube MP4 video or audio stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Itag">
            <summary>Gets the Itag of the stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Uri">
            <summary>Gets the <see cref="P:MyToolkit.Multimedia.YouTubeUri.Uri"/> of the stream. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Type">
            <summary>Gets the stream type. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.HasAudio">
            <summary>Gets a value indicating whether the stream has audio. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.HasVideo">
            <summary>Gets a value indicating whether the stream has video. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.Is3DVideo">
            <summary>Gets a value indicating whether the stream has 3D video. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.VideoQuality">
            <summary>Gets stream's video quality. </summary>
        </member>
        <member name="P:MyToolkit.Multimedia.YouTubeUri.AudioQuality">
            <summary>Gets stream's audio quality. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeQuality">
            <summary>Enumeration of stream qualities. </summary>
        </member>
        <member name="T:MyToolkit.Multimedia.YouTubeThumbnailSize">
            <summary>Enumeration of thumbnail sizes. </summary>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateCachedSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates or retrieves a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.CreateSerializer``1(System.Boolean,System.Type[])">
            <summary>Creates a serializer for the given type and extra types. </summary>
            <typeparam name="T">The type to create the serialzer for. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The extra types. </param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/>. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Serialize``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="obj">The object to serialize. </param>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.Deserialize``1(System.String,System.Type[],System.Boolean)">
            <summary>Deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.SerializeAsync``1(``0,System.Boolean,System.Type[],System.Boolean)">
            <summary>Asynchronously serializes an object to a XML string. </summary>
            <typeparam name="T">The type of the object to serialize. </typeparam>
            <param name="preserveReferences">Specifies whether to preserve references. </param>
            <param name="obj">The object to serialize. </param>
            <param name="extraTypes">The additional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The XML string. </returns>
        </member>
        <member name="M:MyToolkit.Serialization.DataContractSerialization.DeserializeAsync``1(System.String,System.Type[],System.Boolean)">
            <summary>Asynchronously deserializes an object from a XML string. </summary>
            <typeparam name="T">The type of the resulting object. </typeparam>
            <param name="xml">The XML string. </param>
            <param name="extraTypes">The addional types. </param>
            <param name="useSerializerCache">Specifies whether to cache the serializer (default: true). </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.FrameworkElement"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollOffset(System.Windows.Controls.ListBox)">
            <summary>Gets the vertical offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The vertical offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollOffset(System.Windows.Controls.ListBox)">
            <summary>Gets the horizontal offset for a ListBox</summary>
            <param name="list">The ListBox to check</param>
            <returns>The horizontal offset</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVerticalScrollPosition(System.Windows.FrameworkElement)">
            <summary>Gets the vertical scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetHorizontalScrollPosition(System.Windows.FrameworkElement)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <returns>The scroll position. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetVerticalScrollPosition(System.Windows.FrameworkElement,System.Double)">
            <summary>Sets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.SetHorizontalScrollPosition(System.Windows.FrameworkElement,System.Double)">
            <summary>Gets the horizontal scroll position of the element's <see cref="T:System.Windows.Controls.ScrollViewer"/>. </summary>
            <param name="element">The element which must have a <see cref="T:System.Windows.Controls.ScrollViewer"/> as child. </param>
            <param name="position">The scroll position. </param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.IsVisibleOnScreen(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>Checks whether an element which is contained in a container is currently visible on the screen. </summary>
            <param name="element">The element. </param>
            <param name="container">The element's container (e.g. a <see cref="T:System.Windows.Controls.ListBox"/>). </param>
            <returns>true if the element is visible to the user; false otherwise. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindParentDataContext(System.Windows.DependencyObject)">
            <summary>Finds the parent data context of the <see cref="T:System.Windows.DependencyObject"/> by checking the parents.</summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/>.</param>
            <returns>The data context or <c>null</c> when no data context could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetCanvasElementRect(System.Windows.FrameworkElement)">
            <summary>Gets the rectangle of the element in which is contained in a <see cref="T:System.Windows.Controls.Canvas"/>. </summary>
            <param name="element">The element.</param>
            <returns>The rectangle. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.FindVisualChild(System.Windows.FrameworkElement,System.String)">
            <summary>Finds a <see cref="T:System.Windows.FrameworkElement"/> by its name by scanning the visual tree.</summary>
            <param name="root">The root node.</param>
            <param name="name">The element name to search.</param>
            <returns>The found element or <c>null</c> if no element could be found. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetTransform``1(System.Windows.UIElement,MyToolkit.UI.TransformCreationMode)">
            <summary>Returns a render transform of the specified type from the element, creating it if necessary. </summary>
            <typeparam name="TRequestedTransform">The type of transform (Rotate, Translate, etc)</typeparam>
            <param name="element">The element to check</param>
            <param name="mode">The mode to use for creating transforms, if not found</param>
            <returns>The specified transform, or null if not found and not created</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualParent(System.Windows.FrameworkElement)">
            <summary>Returns the visual parent of an element. </summary>
            <param name="node">The element whose parent is desired</param>
            <returns>The visual parent, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChild(System.Windows.FrameworkElement,System.Int32)">
            <summary>Returns a visual child of an element</summary>
            <param name="node">The element whose child is desired</param>
            <param name="index">The index of the child</param>
            <returns>The found child, or null if not found (usually means visual tree is not ready)</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(System.Windows.DependencyObject)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>Gets the visual children of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>Get the visual tree children of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>Get the visual tree children of an element and the element itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.DependencyObject,System.Boolean)">
            <summary>Gets the visual children.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualChildren(System.Windows.FrameworkElement)">
            <summary>Gets all the visual children of the element</summary>
            <param name="root">The element to get children of</param>
            <returns>An enumerator of the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(System.Windows.DependencyObject,System.Boolean,System.Collections.Generic.Stack{System.Windows.DependencyObject})">
            <summary>A helper method used to get visual descendants using a depth-first strategy.</summary>
            <param name="target">The target.</param>
            <param name="strict">Prevents the search from navigating the logical tree; eg. ContentControl.Content</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element itself. </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'element' cannot be null. </exception>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>Get the visual tree descendants of an element and the element  itself.</summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element and the element itself.</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualAncestors(System.Windows.FrameworkElement)">
            <summary>Gets the ancestors of the element, up to the root. </summary>
            <param name="node">The element to start from. </param>
            <returns>An enumerator of the ancestors. </returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Prepends an item to the beginning of an enumeration</summary>
            <typeparam name="T">The type of item in the enumeration</typeparam>
            <param name="list">The existing enumeration</param>
            <param name="head">The item to return before the enumeration</param>
            <returns>An enumerator that returns the head, followed by the rest of the list</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualStateGroup(System.Windows.FrameworkElement,System.String)">
            <summary>Gets the VisualStateGroup with the given name, looking up the visual tree</summary>
            <param name="root">AssociatedObject to start from</param>
            <param name="groupName">Name of the group to look for</param>
            <returns>The group, if found, or null</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.TestVisibility(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Controls.Orientation,System.Boolean)">
            <summary>Tests if the given item is visible or not inside a given viewport</summary>
            <param name="item">The item to check for visibility</param>
            <param name="viewport">The viewport to check visibility within</param>
            <param name="orientation">The orientation to check visibility with respect to (vertical or horizontal)</param>
            <param name="wantVisible">Whether the test is for being visible or invisible</param>
            <returns>True if the item's visibility matches the wantVisible parameter</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},System.Windows.FrameworkElement,System.Windows.Controls.Orientation)">
            <summary>Returns the items that are visible in a given container.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Whether to check for vertical or horizontal visibility</param>
            <returns>The items that are (at least partially) visible</returns>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisibleItems``1(System.Collections.Generic.IEnumerable{``0},System.Windows.FrameworkElement,System.Windows.Controls.Orientation,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@,System.Collections.Generic.List{``0}@)">
            <summary>Returns the items that are visible in a given container plus the invisible ones before and after.</summary>
            <typeparam name="T">The type of items being tested</typeparam>
            <param name="items">The items being tested; typically the children of a StackPanel</param>
            <param name="viewport">The viewport to test visibility against; typically a ScrollViewer</param>
            <param name="orientation">Wether to check for vertical or horizontal visibility</param>
            <param name="beforeItems">List to be populated with items that precede the visible items</param>
            <param name="visibleItems">List to be populated with the items that are visible</param>
            <param name="afterItems">List to be populated with the items that follow the visible items</param>
            <remarks>This function assumes that items are ordered top-to-bottom or left-to-right; if items are in random positions it won't work</remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents(System.Windows.FrameworkElement)">
            <summary>Performs a breadth-first enumeration of all the descendents in the tree</summary>
            <param name="root">The root node</param>
            <returns>An enumerator of all the children</returns>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetVisualDescendents``1(System.Windows.FrameworkElement,System.Boolean)">
            <summary>Returns all the descendents of a particular type</summary>
            <typeparam name="T">The type to look for</typeparam>
            <param name="root">The root element</param>
            <param name="allAtSameLevel">Whether to stop searching the tree after the first set of items are found</param>
            <returns>List of the element found</returns>
            <remarks>
            The allAtSameLevel flag is used to control enumeration through the tree. For many cases (eg, finding ListBoxItems in a
            ListBox) you want enumeration to stop as soon as you've found all the items in the ListBox (no need to search further
            in the tree). For other cases though (eg, finding all the Buttons on a page) you want to exhaustively search the entire tree
            </remarks>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintDescendentsTree(System.Windows.FrameworkElement)">
            <summary>Print the entire visual element tree of an item to the debug console</summary>
            <param name="root">The item whose descendents should be printed</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetChildTree(System.Windows.FrameworkElement,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of descendents, formatted with indentation</summary>
            <param name="root">The item whose tree should be returned</param>
            <param name="prefix">The prefix for this level of hierarchy</param>
            <param name="addPrefix">The string to add for the next level</param>
            <param name="results">A list that will contain the items on return</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.PrintAncestorTree(System.Windows.FrameworkElement)">
            <summary>Prints the visual ancestor tree for an item to the debug console</summary>
            <param name="node">The item whost ancestors you want to print</param>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.GetAncestorVisualTree(System.Windows.FrameworkElement,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of ancestors</summary>
            <param name="node">The node whose ancestors you want</param>
            <param name="children">A list that will contain the children</param>
        </member>
        <member name="F:MyToolkit.UI.FrameworkElementExtensions.workItems">
            <summary>List of work to do on the next render (at the end of the current tick)</summary>
        </member>
        <member name="M:MyToolkit.UI.FrameworkElementExtensions.ScheduleOnNextRender(System.Action)">
            <summary>Schedules work to happen at the end of this tick, when the <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/> event is raised</summary>
            <param name="action">The work to do</param>
            <remarks>Typically you can schedule work using Dispatcher.BeginInvoke, but sometimes that will result in a single-frame
            glitch of the visual tree. In that case, use this method.</remarks>
        </member>
        <member name="T:MyToolkit.UI.FrameworkElementExtensions.VisibleSearchMode">
            <summary>Simple enumeration used in the state machine of GetVisibleItems</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.None">
            <summary>Don't try and create a transform if it doesn't already exist</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Create">
            <summary>Create a transform if none exists</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.AddToGroup">
            <summary>Create and add to an existing group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CombineIntoGroup">
            <summary>Create a group and combine with existing transform; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.IgnoreIdentityMatrix">
            <summary>Treat identity matrix as if it wasn't there; may break existing animations</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.CreateOrAddAndIgnoreMatrix">
            <summary>Create a new transform or add to group</summary>
        </member>
        <member name="F:MyToolkit.UI.TransformCreationMode.Default">
            <summary>Default behavior, equivalent to CreateOrAddAndIgnoreMatrix</summary>
        </member>
        <member name="T:MyToolkit.Utilities.ColorUtilities">
            <summary>Provides methods to manipulate <see cref="T:System.Windows.Media.Color"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.Mix(System.Windows.Media.Color,System.Double,System.Windows.Media.Color)">
            <summary>Blends the given foreground color with the background using the given alpha value. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The alpha value. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.RemoveAlpha(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>Removes the transparency from the foreground color using the given background color. </summary>
            <param name="foreground">The foreground <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="background">The background <see cref="T:System.Windows.Media.Color"/>. </param>
            <returns>The color without transparency. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ChangeAlpha(System.Windows.Media.Color,System.String)">
            <summary>Changes the alpha channel of the <see cref="T:System.Windows.Media.Color"/>. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="alpha">The new alpha value. </param>
            <returns>The new <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.ToHex(System.Windows.Media.Color,System.Boolean)">
            <summary>Converts a <see cref="T:System.Windows.Media.Color"/> to HEX string. </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/>. </param>
            <param name="includeAlpha">If false then #RRGGBB, true then #AARRGGBB. </param>
            <returns>The HEX string. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.String)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="colorCode">The HEX in the form #RRGGBB or #AARRGGBB. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ColorUtilities.FromHex(System.UInt32)">
            <summary>Creates a <see cref="T:System.Windows.Media.Color"/> from a HEX value. </summary>
            <param name="argb">The HEX value. </param>
            <returns>The <see cref="T:System.Windows.Media.Color"/>. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyObjectExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.DependencyObject"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>Traverses the visual tree and returns the first child of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The child object. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyObjectExtensions.FindVisualChildren``1(System.Windows.DependencyObject)">
            <summary>Traverses the visual tree and returns all children of the desired type. </summary>
            <typeparam name="T">The child type to find. </typeparam>
            <param name="obj">The parent object. </param>
            <returns>The children. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.DependencyPropertyChangedEvent">
            <summary>Provides methods to register to dependency property handler events. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Register(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Registers an event callback on a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="M:MyToolkit.Utilities.DependencyPropertyChangedEvent.Deregister(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Action{System.Object,System.Object})">
            <summary>Deregisters an event callback from a given dependency property. </summary>
            <param name="frameworkElement">The source framework element. </param>
            <param name="property">The property to register the callback for. </param>
            <param name="handler">The event handler. </param>
        </member>
        <member name="T:MyToolkit.Utilities.ItemsControlExtensions">
            <summary>Provides extension methods for <see cref="T:System.Windows.Controls.ItemsControl"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetVisibleItems``1(System.Windows.Controls.ItemsControl)">
            <summary>Gets all items of the <see cref="T:System.Windows.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the items. </typeparam>
            <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl"/>. </param>
            <returns>The visible items. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.ItemsControlExtensions.GetFirstVisibleItem``1(System.Windows.Controls.ItemsControl)">
            <summary>Gets the first item of the <see cref="T:System.Windows.Controls.ItemsControl"/> which are currently visible on the screen. </summary>
            <typeparam name="T">The type of the item. </typeparam>
            <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl"/>. </param>
            <returns>The visible item. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.Xml">
            <summary>Provides utility methods for handling XML. </summary>
        </member>
        <member name="T:MyToolkit.Build.AssemblyReference">
            <summary>Describes a referenced assembly. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsReferenceBase">
            <summary>Describes a reference. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsReferenceBase.Name">
            <summary>Gets the name of the NuGet package. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsReferenceBase.Version">
            <summary>Gets the version of the installed NuGet package. </summary>
        </member>
        <member name="M:MyToolkit.Build.AssemblyReference.#ctor(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.AssemblyReference"/> class. </summary>
            <param name="projectItem">The raw name. </param>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.ProjectItem">
            <summary>Gets the full name. </summary>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.Name">
            <summary>Gets the name of the NuGet package. </summary>
        </member>
        <member name="P:MyToolkit.Build.AssemblyReference.Version">
            <summary>Gets the version of the installed NuGet package. </summary>
        </member>
        <member name="T:MyToolkit.Build.NuGetPackageReference">
            <summary>Describes an installed NuGet package. </summary>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.NuGetPackageReference"/> class. </summary>
            <param name="name">The package id. </param>
            <param name="version">The package version. </param>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.IsNuGetOrgPackageAsync">
            <exception cref="T:System.Net.WebException">There was a connection exception. </exception>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.GetDependenciesAsync">
            <summary>Loads the package dependencies from NuGet.org. </summary>
            <returns>The package dependencies. </returns>
            <exception cref="T:MyToolkit.Build.Exceptions.NuGetPackageNotFoundException">The NuGet package could not be found on nuget.org</exception>
            <exception cref="T:System.Net.WebException">There was a connection exception. </exception>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.GetAllDependenciesAsync">
            <summary>Recursively loads all package dependencies from NuGet.org. </summary>
            <returns>All package dependencies. </returns>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object. </returns>
        </member>
        <member name="M:MyToolkit.Build.NuGetPackageReference.IsNuGetOrgPackageInternal">
            <exception cref="T:System.Net.WebException">There was a connection exception. </exception>
        </member>
        <member name="P:MyToolkit.Build.NuGetPackageReference.Name">
            <summary>Gets the name of the NuGet package. </summary>
        </member>
        <member name="P:MyToolkit.Build.NuGetPackageReference.Version">
            <summary>Gets the version of the installed NuGet package. </summary>
        </member>
        <member name="T:MyToolkit.Build.ProjectDependencyResolver">
            <summary>Provides methods to work with Visual Studio project files. </summary>
        </member>
        <member name="M:MyToolkit.Build.ProjectDependencyResolver.GetProjectReferences(System.String)">
            <summary>Gets all referenced project files of a given Visual Studio project file. </summary>
            <param name="projectPath">The project file path. </param>
            <returns>The referenced project files. </returns>
        </member>
        <member name="M:MyToolkit.Build.ProjectDependencyResolver.GetBuildOrder(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sorts the given projects in their required build order. </summary>
            <param name="projectPaths">The project files. </param>
            <returns>The project file paths in the correct build order. </returns>
        </member>
        <member name="M:MyToolkit.Build.ProjectTypeGuidMapper.ResolveGuid(System.String)">
            <summary>Resolves the given GUID and returns a <see cref="T:MyToolkit.Build.VsProjectType"/>. </summary>
            <param name="guid">The GUID. </param>
            <returns>The <see cref="T:MyToolkit.Build.VsProjectType"/>. </returns>
        </member>
        <member name="T:MyToolkit.Build.VsObject">
            <summary>Describes a Visual Studio object. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsObject.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.VsObject"/> class. </summary>
            <param name="path">The path to the object. </param>
        </member>
        <member name="M:MyToolkit.Build.VsObject.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>. </summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false. </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:MyToolkit.Build.VsObject.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Id">
            <summary>Gets the id of the object. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Path">
            <summary>Gets the path of the project file. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.Name">
            <summary>Gets the name of the project. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsObject.FileName">
            <summary>Gets the file name of the project. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsProject">
            <summary>Describes a Visual Studio project. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProject.#ctor(System.String)">
            <exception cref="T:Microsoft.Build.Exceptions.InvalidProjectFileException">The project file could not be found. </exception>
        </member>
        <member name="M:MyToolkit.Build.VsProject.Load(System.String)">
            <summary>Loads a project from a given file path, if the project has already been loaded before, the same reference is returned. </summary>
            <param name="filePath">The project file path. </param>
            <returns>The project. </returns>
            <exception cref="T:Microsoft.Build.Exceptions.InvalidProjectFileException">The project file could not be found. </exception>
        </member>
        <member name="M:MyToolkit.Build.VsProject.AreSameProjectFiles(System.String,System.String)">
            <summary>Checks whether the two project file paths are the same files. </summary>
            <param name="projectPath1">The first project file path. </param>
            <param name="projectPath2">The second project file path. </param>
            <returns>True when the paths are the same files. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.LoadAllFromDirectoryAsync(System.String,System.Boolean)">
            <summary>Recursively loads all Visual Studio projects from the given directory. </summary>
            <param name="path">The directory path. </param>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions (projects with exceptions are not returned). </param>
            <returns>The projects. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.LoadReferences">
            <summary>Loads the project's referenced assemblies, projects and NuGet packages. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsReferencingProject(MyToolkit.Build.VsProject)">
            <summary>Checks whether this project references the given project. </summary>
            <param name="project">The project. </param>
            <returns>True when the given project is referenced. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsReferencingAnyProjects(System.Collections.Generic.IEnumerable{MyToolkit.Build.VsProject})">
            <summary>Checks whether the project is referencing any of the given projects. </summary>
            <param name="projects">The projects to check. </param>
            <returns>True when this project references any of the given projects. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsProjectFile(System.String)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="filePath">The project path. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsSameProject(MyToolkit.Build.VsProject)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="project">The other project. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.IsSameProject(MyToolkit.Build.VsProjectReference)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="projectReference">The other project reference. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProject.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsProject.Project">
            <summary>Gets the internal MSBuild project. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.ProjectReferences">
            <summary>Gets the list of referenced projects. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.AssemblyReferences">
            <summary>Gets the list of referenced assemblies (DLLs). </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.NuGetReferences">
            <summary>Gets the list of installed NuGet packages. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.Name">
            <summary>Gets the name of the project. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.Namespace">
            <summary>Gets the root namespace. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.FrameworkVersion">
            <summary>Gets or sets the target framework version. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.ToolsVersion">
            <summary>Gets or sets the used tools version. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.Guid">
            <summary>Gets or sets the project's GUID. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.ProjectTypeGuids">
            <summary>Gets the project type GUIDs. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsProject.ProjectTypes">
            <summary>Gets the project types. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsProjectEnumerableExtensions">
            <summary>Provides extension methods for enumerables of <see cref="T:MyToolkit.Build.VsProject"/>. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProjectEnumerableExtensions.SortByBuildOrder(System.Collections.Generic.IEnumerable{MyToolkit.Build.VsProject})">
            <summary>Sorts the given enumeration of <see cref="T:MyToolkit.Build.VsProject"/> by their required build order. </summary>
            <param name="projects">The projects to sort. </param>
            <returns>The projects in the correct build order. </returns>
            <exception cref="T:MyToolkit.Build.Exceptions.BuildOrderException">Thrown when the projects have cyclic dependencies. </exception>
        </member>
        <member name="T:MyToolkit.Build.VsProjectReference">
            <summary>An project reference. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsProjectReference.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.VsProjectReference"/> class. </summary>
            <param name="path">The path to the referenced project. </param>
            <param name="name">The reference name. </param>
        </member>
        <member name="M:MyToolkit.Build.VsProjectReference.Load(MyToolkit.Build.VsProject,Microsoft.Build.Evaluation.ProjectItem)">
            <summary>Loads a <see cref="T:MyToolkit.Build.VsProjectReference"/> from a <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/>. </summary>
            <param name="project">The parent project. </param>
            <param name="projectItem">The <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/>. </param>
            <returns>The <see cref="T:MyToolkit.Build.VsProjectReference"/>. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProjectReference.IsSameProject(MyToolkit.Build.VsProject)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="project">The other project. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsProjectReference.IsSameProject(MyToolkit.Build.VsProjectReference)">
            <summary>Checks whether both projects are loaded from the same file. </summary>
            <param name="projectReference">The other project reference. </param>
            <returns>true when both projects are loaded from the same file. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsProjectReference.Name">
            <summary>Gets the name of the project. </summary>
        </member>
        <member name="T:MyToolkit.Build.VsSolution">
            <summary>Describes a Visual Studio solution. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Build.VsSolution"/> class. </summary>
            <param name="path">The solution path. </param>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.Load(System.String)">
            <summary>Loads a solution from a given file path. </summary>
            <param name="filePath">The solution file path. </param>
            <returns>The solution. </returns>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadProjects">
            <summary>Loads all projects of the solution. </summary>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadProjects(System.Boolean,System.Collections.Generic.Dictionary{System.String,MyToolkit.Build.VsProject})">
            <summary>Loads all projects of the solution. </summary>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions. </param>
            <param name="projectCache">The project cache with already loaded projects. </param>
        </member>
        <member name="M:MyToolkit.Build.VsSolution.LoadAllFromDirectoryAsync(System.String,System.Boolean)">
            <summary>Recursively loads all Visual Studio solutions from the given directory. </summary>
            <param name="path">The directory path. </param>
            <param name="ignoreExceptions">Specifies whether to ignore exceptions (solutions with exceptions are not returned). </param>
            <returns>The solutions. </returns>
        </member>
        <member name="P:MyToolkit.Build.VsSolution.Name">
            <summary>Gets the name of the project. </summary>
        </member>
        <member name="P:MyToolkit.Build.VsSolution.Projects">
            <summary>Gets the list of projects. </summary>
        </member>
        <member name="T:MyToolkit.Controls.TreeViewExtensions">
            <summary>Extension methods for TreeView controls.</summary>
        </member>
        <member name="M:MyToolkit.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)">
            <summary>Expands all TreeView items.</summary>
            <param name="treeView">The tree view.</param>
        </member>
        <member name="M:MyToolkit.Controls.TreeViewExtensions.ExpandItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>Expands a given item.</summary>
            <param name="treeView">The tree view.</param>
            <param name="item">The item to expand.</param>
        </member>
        <member name="M:MyToolkit.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)">
            <summary>Collapses all TreeView items.</summary>
            <param name="treeView">The tree view.</param>
        </member>
        <member name="M:MyToolkit.Controls.TreeViewExtensions.SetSelectedItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>Selects the given item in the three view</summary>
            <param name="treeView">The tree view.</param>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:MyToolkit.Controls.TreeViewExtensions.DeselectItem(System.Windows.Controls.TreeView)">
            <summary>Removes the selection from the TreeView.</summary>
            <param name="treeView">The tree view.</param>
        </member>
        <member name="T:MyToolkit.UI.ShortcutManager">
            <summary>The manager for registering shortcuts.</summary>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type,System.Windows.Input.KeyGesture,System.Action,System.Func{System.Boolean})">
            <summary>Registers a given shortcut for a specific view and connect that shortcut with a given action.</summary>
            <param name="viewType">The type of the view.</param>
            <param name="gesture">The shortcut.</param>
            <param name="action">The action.</param>
            <param name="canExecute">Delegate that determines wheter the action can be executed.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type,System.Windows.Input.KeyGesture,System.Windows.Input.ICommand)">
            <summary>Registers a given shortcut for a specific view and connect that shortcut with a given action.</summary>
            <param name="viewType">The type of the view.</param>
            <param name="gesture">The shortcut.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type[],System.Windows.Input.KeyGesture,System.Action,System.Func{System.Boolean})">
            <summary>Registers a given shortcut for specific views and connect that shortcut with a given action.</summary>
            <param name="viewTypes">The view types.</param>
            <param name="gesture">The shortcut.</param>
            <param name="action">The action.</param>
            <param name="canExecute">Delegate that determines wheter the action can be executed.</param>
        </member>
        <member name="M:MyToolkit.UI.ShortcutManager.RegisterShortcut(System.Type[],System.Windows.Input.KeyGesture,System.Windows.Input.ICommand)">
            <summary>Registers a given shortcut for a specific views and connect that shortcut with a given action.</summary>
            <param name="viewTypes">The view types.</param>
            <param name="gesture">The shortcut.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MyToolkit.UI.UiDispatcher.InvokeAsync(System.Action)">
            <summary>
            Invokes an action on the dispatcher thread. 
            </summary>
            <param name="action">The action. </param>
        </member>
        <member name="T:MyToolkit.Utilities.ApplicationUpdater">
            <summary>Checks for application updates. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.#ctor(System.Reflection.Assembly,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Utilities.ApplicationUpdater"/> class. </summary>
            <param name="applicationAssembly">The application assembly. </param>
            <param name="updateUri">The update URI. </param>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.#ctor(System.Version,System.String)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Utilities.ApplicationUpdater"/> class. </summary>
            <param name="currentVersion">The current application version. </param>
            <param name="updateUri">The update URI. </param>
        </member>
        <member name="M:MyToolkit.Utilities.ApplicationUpdater.CheckForUpdate(System.Windows.Window)">
            <summary>Checks for update and asks user if application should be updated 
            (this is currently beta: not localized and opens browser for download). </summary>
        </member>
        <member name="T:MyToolkit.Utilities.AssemblyExtensions">
            <summary>Provides extension methods for <see cref="T:System.Reflection.Assembly"/> objects. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.AssemblyExtensions.GetBuildTime(System.Reflection.Assembly)">
            <summary>Gets the build time of the assembly. </summary>
            <param name="assembly">The assembly. </param>
            <returns>The build time. </returns>
        </member>
        <member name="M:MyToolkit.Utilities.AssemblyExtensions.GetVersionWithBuildTime(System.Reflection.Assembly)">
            <summary>Gets the version and the build time of the assembly (format: '0.0.0.0 (BUILDTIME)'). </summary>
            <param name="assembly">The assembly. </param>
            <returns>The version and build time. </returns>
        </member>
        <member name="T:MyToolkit.Utilities.FileOpenEventArgs">
            <summary>The file open event arguments. </summary>
        </member>
        <member name="P:MyToolkit.Utilities.FileOpenEventArgs.FileName">
            <summary>Gets the file name of the file to open. </summary>
        </member>
        <member name="T:MyToolkit.Utilities.FileOpenHandler">
            <summary>Handles the file open command line parameter and assures that files are opened in the same application. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.FileOpenHandler.Initialize(System.Windows.Window)">
            <summary>Initializes the file open handler. </summary>
            <param name="window">The window. </param>
        </member>
        <member name="P:MyToolkit.Utilities.FileOpenHandler.Window">
            <summary>Gets the window where the events are dispatched to. </summary>
        </member>
        <member name="E:MyToolkit.Utilities.FileOpenHandler.FileOpen">
            <summary>Occurs when a file should be opened. </summary>
        </member>
        <member name="T:MyToolkit.Utilities.UriExtensions">
            <summary>Contains extension methods to work with <see cref="T:System.Uri"/>s. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.UriExtensions.FindWebCertificate(System.Uri)">
            <summary>Finds the certificate of the given <see cref="T:System.Uri"/>. </summary>
            <param name="uri">The URI. </param>
            <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> for the given <see cref="T:System.Uri"/>, or <c>null</c> if no certificate could be found. </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable. </exception>
        </member>
        <member name="M:MyToolkit.Utilities.UriExtensions.FindWebCertificateValidityPeriod(System.Uri)">
            <summary>Finds the start and end date of the given <see cref="T:System.Uri"/>'s certificate. </summary>
            <param name="uri">The URI. </param>
            <returns>The expiration range for the given <see cref="T:System.Uri"/>, or <c>null</c> if no certificate could be found. </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate is unreadable. </exception>
        </member>
        <member name="T:MyToolkit.Utilities.CertificateValidityPeriod">
            <summary>Stores the start and end date of a certificate. </summary>
        </member>
        <member name="M:MyToolkit.Utilities.CertificateValidityPeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>Initializes a new instance of the <see cref="T:MyToolkit.Utilities.CertificateValidityPeriod"/> class.</summary>
            <param name="start">The start date.</param>
            <param name="end">The end date.</param>
        </member>
        <member name="M:MyToolkit.Utilities.CertificateValidityPeriod.IsValidForDate(System.DateTime)">
            <summary>Checks whether the given time is between <see cref="P:MyToolkit.Utilities.CertificateValidityPeriod.Start"/> and <see cref="P:MyToolkit.Utilities.CertificateValidityPeriod.End"/>. </summary>
            <param name="time">The time. </param>
            <returns><c>true</c> if the <paramref name="time"/> is between <see cref="P:MyToolkit.Utilities.CertificateValidityPeriod.Start"/> and <see cref="P:MyToolkit.Utilities.CertificateValidityPeriod.End"/>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="P:MyToolkit.Utilities.CertificateValidityPeriod.Start">
            <summary>Gets the start date. </summary>
        </member>
        <member name="P:MyToolkit.Utilities.CertificateValidityPeriod.End">
            <summary>Gets the end date. </summary>
        </member>
    </members>
</doc>
